- AUTO em impls
- implementation
    - recusar overriding
        - final methods / fragile base class

- na hora da *chamada*
    - colocar um where em volta pegando o dict da implementacao que bate:
        - Dict.IOrd (lt,lte,gt,gte) = dIOrdBool
    - inserir os dicts como argumentos iniciais:
        - lte (dIEqBool, dIOrdBool, Bool.True,  Bool.False)

- typesys
    - typeclass
        - trabalho vai ser:
            - ver que nome é poli (eq)
            - pegar todos os dicts(s) que casam com o(s) constraint(s) (ieq_*, ishow_*)
            - achar o(s) dict(s) que casa(m) com a chamada (f(1,"a") -> ieq_nat,ishow_string)
            - inserir o(s) dict(s) como argumento(s)
    - inference?
- closure / upvs
    - verificar se funcao de fato escapa
        - senao, é um "nested" e não deve declarar upvs

- Basic
    - mudar de ; para .
    - sequencia:
        ; seq1
        ; seq2
        ; -> x
    - set para mudar valor de variavel
    - data sealed
        Bool
        Bool.False
        Bool.True
      ;
- Full
    - numerais -> data
    - typedef:
        - Dict.IEq
    - interface/implementation
    - vtable

- Dcl
    - verificar que
        - todas as vars sao declaradas exatamente uma vez
        - todas sao inicializadas extamente uma vez

- Full
    - operadores infixados +, prefixados (+), e funcoes infixadas `f`

-------------------------------------------------------------------------------

- 2 relações de subtipagem
    - heranças
        - struct
    - classes
        - dicionario
