- Fazer dict depender de v fc get
- List of IEnum
    - Estou em PolyManual.dynamic.XXX

- tipo da ifce vs tipo da impl
    - escondendo a ifce, os usos internos do nome apontam para a impl
        - mas nem sempre o uso é para a impl
            - ex., Book.enum (Day.lt usa Nat.lt)
    - isso esta obrigando a declarar o tipos dos argumentos
        - ver Prelude:nat_iord
        - ver BookSpec:enum
- Inferir tipo de fields em Data
    - List ...
    - Tem alguns exemplos de :: que nao deveriam ser necessarios
        - Nat!
- Env = Data/Impl/Ifce/Decls
- list receber string vs tk_sym
- dynamic?
    - Listas em Book
    - primeiro ver se da erro tentando lista de tipos heterogeneos

- tratar Data patt
    - precisa de "data" declaration
    - remover tipos de nat_iord

- poly
    - multiplas variaveis

- voltar ao Book
    - terminei TODO:typeclass
        - achar o proximo

- stack trace

- implementation
    - recusar overriding
        - final methods / fragile base class

- typesys
    - typeclass
        - trabalho vai ser:
            - ver que nome é poli (eq)
            - pegar todos os dicts(s) que casam com o(s) constraint(s) (ieq_*, ishow_*)
            - achar o(s) dict(s) que casa(m) com a chamada (f(1,"a") -> ieq_nat,ishow_string)
            - inserir o(s) dict(s) como argumento(s)
    - inference?
- closure / upvs
    - verificar se funcao de fato escapa
        - senao, é um "nested" e não deve declarar upvs

- Basic
    - mudar de ; para .
    - sequencia:
        ; seq1
        ; seq2
        ; -> x
    - set para mudar valor de variavel
    - data sealed
        Bool
        Bool.False
        Bool.True
      ;
- Full
    - numerais -> data
    - typedef:
        - Dict.IEq
    - interface/implementation
    - vtable

- Dcl
    - verificar que
        - todas as vars sao declaradas exatamente uma vez
        - todas sao inicializadas extamente uma vez

- Full
    - operadores infixados +, prefixados (+), e funcoes infixadas `f`

-------------------------------------------------------------------------------

- 2 relações de subtipagem
    - heranças
        - struct
    - classes
        - dicionario
